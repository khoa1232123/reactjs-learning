{"version":3,"sources":["reusable/DocsLink.js","views/Charts/ChartLineSimple.js","views/Charts/ChartBarSimple.js","views/Charts/MainChartExample.js","views/Charts/index.jsx"],"names":["DocsLink","props","name","text","rest","href","className","rel","target","React","memo","ChartLineSimple","borderColor","backgroundColor","pointHoverBackgroundColor","dataPoints","label","pointed","attributes","pointHoverColor","defaultDatasets","data","getColor","pointBackgroundColor","pointedOptions","scales","xAxes","offset","gridLines","color","zeroLineColor","ticks","fontSize","fontColor","yAxes","display","min","Math","apply","max","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","straightOptions","defaultOptions","options","Object","assign","maintainAspectRatio","legend","computedDatasets","deepObjectsMerge","datasets","computedOptions","labels","defaultProps","ChartBarSimple","barPercentage","categoryPercentage","brandSuccess","getStyle","brandInfo","brandDanger","MainChartExample","random","floor","data1","data2","data3","i","push","hexToRgba","borderDash","drawOnChartArea","beginAtZero","maxTicksLimit","stepSize","ceil","hoverBorderWidth","Charts","columns","tooltips","enabled","pointBorderColor","pointHoverBorderColor","aspectRatio","tooltipLabelColor"],"mappings":"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","file":"static/js/5.a885170e.chunk.js","sourcesContent":["import React from 'react'\nimport { CLink } from '@coreui/react'\n\nconst DocsLink = props => {\n  const {\n    name,\n    text,\n    ...rest\n  } = props\n\n  const href = name ? `https://coreui.io/react/docs/components/${name}` : props.href\n\n  return (\n    <div className=\"card-header-actions\">\n      <CLink \n        {...rest}\n        href={href}\n        rel=\"noreferrer noopener\" \n        target=\"_blank\" \n        className=\"card-header-action\"  \n      >\n        <small className=\"text-muted\">{ text || 'docs' }</small>\n      </CLink>\n    </div>\n  )\n}\n\nexport default React.memo(DocsLink)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor, deepObjectsMerge } from '@coreui/utils'\nimport { CChartLine } from '@coreui/react-chartjs'\n\nconst ChartLineSimple = props => {\n\n  const {\n    borderColor,\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props\n\n  const pointHoverColor = (()=>{\n    if (pointHoverBackgroundColor) {\n      return pointHoverBackgroundColor\n    } else if (backgroundColor !== 'transparent') {\n      return backgroundColor\n    }\n    return borderColor\n  })()\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        borderColor: getColor(borderColor),\n        backgroundColor: getColor(backgroundColor),\n        pointBackgroundColor: getColor(pointHoverColor),\n        pointHoverBackgroundColor: getColor(pointHoverColor),\n        label\n      }\n    ]\n  })()\n\n  const pointedOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [\n          {\n            offset: true,\n            gridLines: {\n              color: 'transparent',\n              zeroLineColor: 'transparent'\n            },\n            ticks: {\n              fontSize: 2,\n              fontColor: 'transparent'\n            }\n          }\n        ],\n        yAxes: [\n          {\n            display: false,\n            ticks: {\n              display: false,\n              min: Math.min.apply(Math, dataPoints) - 5,\n              max: Math.max.apply(Math, dataPoints) + 5\n            }\n          }\n        ]\n      },\n      elements: {\n        line: {\n          borderWidth: 1\n        },\n        point: {\n          radius: 4,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const straightOptions = (()=>{\n    return {\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      },\n      elements: {\n        line: {\n          borderWidth: 2\n        },\n        point: {\n          radius: 0,\n          hitRadius: 10,\n          hoverRadius: 4\n        }\n      }\n    }\n  })()\n\n  const defaultOptions = (()=>{\n    const options = pointed ? pointedOptions : straightOptions\n      return Object.assign({}, options, {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        }\n      })\n  })()\n\n  const computedDatasets = (() => {\n    return deepObjectsMerge(defaultDatasets, attributes.datasets || {})\n  })()\n\n  const computedOptions = (() => {\n    return deepObjectsMerge(defaultOptions, attributes.options || {})\n  })()\n\n  // render\n\n  return (\n    <CChartLine\n      {...attributes}\n      datasets={computedDatasets}\n      options={computedOptions}\n      labels={label}\n    />\n  )\n}\n\nChartLineSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  borderColor: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartLineSimple.defaultProps = {\n  borderColor: 'rgba(255,255,255,.55)',\n  backgroundColor: 'transparent',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartLineSimple\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { getColor } from '@coreui/utils'\nimport { CChartBar } from '@coreui/react-chartjs'\n\nconst ChartBarSimple = props => {\n\n  const {\n    backgroundColor,\n    pointHoverBackgroundColor,\n    dataPoints,\n    label,\n    pointed,\n    ...attributes\n  } = props\n\n  const defaultDatasets = (()=>{\n    return [\n      {\n        data: dataPoints,\n        backgroundColor: getColor(backgroundColor),\n        pointHoverBackgroundColor: getColor(pointHoverBackgroundColor),\n        label: label,\n        barPercentage: 0.5,\n        categoryPercentage: 1\n      }\n    ]\n  })()\n\n  const defaultOptions = (()=>{\n    return {\n      maintainAspectRatio: false,\n      legend: {\n        display: false\n      },\n      scales: {\n        xAxes: [{\n          display: false\n        }],\n        yAxes: [{\n          display: false\n        }]\n      }\n    }\n  })()\n\n  // render\n  return (\n    <CChartBar\n      {...attributes}\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={label}\n    />\n  )\n}\n\nChartBarSimple.propTypes = {\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  className: PropTypes.string,\n  //\n  backgroundColor: PropTypes.string,\n  pointHoverBackgroundColor: PropTypes.string,\n  dataPoints: PropTypes.array,\n  label: PropTypes.string,\n  pointed: PropTypes.bool\n};\n\nChartBarSimple.defaultProps = {\n  backgroundColor: 'rgba(0,0,0,.2)',\n  dataPoints: [10, 22, 34, 46, 58, 70, 46, 23, 45, 78, 34, 12],\n  label: 'Sales'\n};\n\nexport default ChartBarSimple\n","import React from 'react'\nimport { CChartLine } from '@coreui/react-chartjs'\nimport { getStyle, hexToRgba } from '@coreui/utils'\n\nconst brandSuccess = getStyle('success') || '#4dbd74'\nconst brandInfo = getStyle('info') || '#20a8d8'\nconst brandDanger = getStyle('danger') || '#f86c6b'\n\nconst MainChartExample = attributes => {\n  const random = (min, max)=>{\n    return Math.floor(Math.random() * (max - min + 1) + min)\n  }\n\n  const defaultDatasets = (()=>{\n    let elements = 27\n    const data1 = []\n    const data2 = []\n    const data3 = []\n    for (let i = 0; i <= elements; i++) {\n      data1.push(random(50, 200))\n      data2.push(random(80, 100))\n      data3.push(65)\n    }\n    return [\n      {\n        label: 'My First dataset',\n        backgroundColor: hexToRgba(brandInfo, 10),\n        borderColor: brandInfo,\n        pointHoverBackgroundColor: brandInfo,\n        borderWidth: 2,\n        data: data1\n      },\n      {\n        label: 'My Second dataset',\n        backgroundColor: 'transparent',\n        borderColor: brandSuccess,\n        pointHoverBackgroundColor: brandSuccess,\n        borderWidth: 2,\n        data: data2\n      },\n      {\n        label: 'My Third dataset',\n        backgroundColor: 'transparent',\n        borderColor: brandDanger,\n        pointHoverBackgroundColor: brandDanger,\n        borderWidth: 1,\n        borderDash: [8, 5],\n        data: data3\n      }\n    ]\n  })()\n\n  const defaultOptions = (()=>{\n    return {\n        maintainAspectRatio: false,\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            gridLines: {\n              drawOnChartArea: false\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              beginAtZero: true,\n              maxTicksLimit: 5,\n              stepSize: Math.ceil(250 / 5),\n              max: 250\n            },\n            gridLines: {\n              display: true\n            }\n          }]\n        },\n        elements: {\n          point: {\n            radius: 0,\n            hitRadius: 10,\n            hoverRadius: 4,\n            hoverBorderWidth: 3\n          }\n        }\n      }\n    }\n  )()\n\n  // render\n  return (\n    <CChartLine\n      {...attributes}\n      datasets={defaultDatasets}\n      options={defaultOptions}\n      labels={['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su']}\n    />\n  )\n}\n\n\nexport default MainChartExample\n","import React from \"react\";\nimport { CCard, CCardBody, CCardGroup, CCardHeader } from \"@coreui/react\";\nimport {\n  CChartBar,\n  CChartLine,\n  CChartDoughnut,\n  CChartRadar,\n  CChartPie,\n  CChartPolarArea,\n} from \"@coreui/react-chartjs\";\nimport { DocsLink } from \"src/reusable\";\nimport ChartBarSimple from \"./ChartBarSimple\";\nimport ChartLineSimple from \"./ChartLineSimple\";\nimport MainChartExample from \"./MainChartExample\";\n\nconst Charts = () => {\n  return (\n    <CCardGroup columns className=\"cols-2\">\n      <CCard>\n        <CCardHeader>\n          Bar Chart\n          <DocsLink href=\"http://www.chartjs.org\" />\n        </CCardHeader>\n        <CCardBody>\n          <CChartBar\n            datasets={[\n              {\n                label: \"GitHub Commits\",\n                backgroundColor: \"#f87979\",\n                data: [40, 20, 12, 39, 10, 40, 39, 80, 40, 20, 12, 11],\n              },\n            ]}\n            labels=\"months\"\n            options={{\n              tooltips: {\n                enabled: true,\n              },\n            }}\n          />\n        </CCardBody>\n      </CCard>\n\n      <CCard>\n        <CCardHeader>Doughnut Chart</CCardHeader>\n        <CCardBody>\n          <CChartDoughnut\n            datasets={[\n              {\n                backgroundColor: [\"#41B883\", \"#E46651\", \"#00D8FF\", \"#DD1B16\"],\n                data: [40, 20, 80, 10],\n              },\n            ]}\n            labels={[\"VueJs\", \"EmberJs\", \"ReactJs\", \"AngularJs\"]}\n            options={{\n              tooltips: {\n                enabled: true,\n              },\n            }}\n          />\n        </CCardBody>\n      </CCard>\n\n      <CCard>\n        <CCardHeader>Line Chart</CCardHeader>\n        <CCardBody>\n          <CChartLine\n            datasets={[\n              {\n                label: \"Data One\",\n                backgroundColor: \"rgb(228,102,81,0.9)\",\n                data: [30, 39, 10, 50, 30, 70, 35],\n              },\n              {\n                label: \"Data Two\",\n                backgroundColor: \"rgb(0,216,255,0.9)\",\n                data: [39, 80, 40, 35, 40, 20, 45],\n              },\n            ]}\n            options={{\n              tooltips: {\n                enabled: true,\n              },\n            }}\n            labels=\"months\"\n          />\n        </CCardBody>\n      </CCard>\n\n      <CCard>\n        <CCardHeader>Pie Chart</CCardHeader>\n        <CCardBody>\n          <CChartPie\n            datasets={[\n              {\n                backgroundColor: [\"#41B883\", \"#E46651\", \"#00D8FF\", \"#DD1B16\"],\n                data: [40, 20, 80, 10],\n              },\n            ]}\n            labels={[\"VueJs\", \"EmberJs\", \"ReactJs\", \"AngularJs\"]}\n            options={{\n              tooltips: {\n                enabled: true,\n              },\n            }}\n          />\n        </CCardBody>\n      </CCard>\n\n      <CCard>\n        <CCardHeader>Polar Area Chart</CCardHeader>\n        <CCardBody>\n          <CChartPolarArea\n            datasets={[\n              {\n                label: \"My First dataset\",\n                backgroundColor: \"rgba(179,181,198,0.2)\",\n                pointBackgroundColor: \"rgba(179,181,198,1)\",\n                pointBorderColor: \"#fff\",\n                pointHoverBackgroundColor: \"rgba(179,181,198,1)\",\n                pointHoverBorderColor: \"rgba(179,181,198,1)\",\n                data: [65, 59, 90, 81, 56, 55, 40],\n              },\n              {\n                label: \"My Second dataset\",\n                backgroundColor: \"rgba(255,99,132,0.2)\",\n                pointBackgroundColor: \"rgba(255,99,132,1)\",\n                pointBorderColor: \"#fff\",\n                pointHoverBackgroundColor: \"rgba(255,99,132,1)\",\n                pointHoverBorderColor: \"rgba(255,99,132,1)\",\n                data: [28, 48, 40, 19, 96, 27, 100],\n              },\n            ]}\n            options={{\n              aspectRatio: 1.5,\n              tooltips: {\n                enabled: true,\n              },\n            }}\n            labels={[\n              \"Eating\",\n              \"Drinking\",\n              \"Sleeping\",\n              \"Designing\",\n              \"Coding\",\n              \"Cycling\",\n              \"Running\",\n            ]}\n          />\n        </CCardBody>\n      </CCard>\n\n      <CCard>\n        <CCardHeader>Radar Chart</CCardHeader>\n        <CCardBody>\n          <CChartRadar\n            datasets={[\n              {\n                label: \"2019\",\n                backgroundColor: \"rgba(179,181,198,0.2)\",\n                borderColor: \"rgba(179,181,198,1)\",\n                pointBackgroundColor: \"rgba(179,181,198,1)\",\n                pointBorderColor: \"#fff\",\n                pointHoverBackgroundColor: \"#fff\",\n                pointHoverBorderColor: \"rgba(179,181,198,1)\",\n                tooltipLabelColor: \"rgba(179,181,198,1)\",\n                data: [65, 59, 90, 81, 56, 55, 40],\n              },\n              {\n                label: \"2020\",\n                backgroundColor: \"rgba(255,99,132,0.2)\",\n                borderColor: \"rgba(255,99,132,1)\",\n                pointBackgroundColor: \"rgba(255,99,132,1)\",\n                pointBorderColor: \"#fff\",\n                pointHoverBackgroundColor: \"#fff\",\n                pointHoverBorderColor: \"rgba(255,99,132,1)\",\n                tooltipLabelColor: \"rgba(255,99,132,1)\",\n                data: [28, 48, 40, 19, 96, 27, 100],\n              },\n            ]}\n            options={{\n              aspectRatio: 1.5,\n              tooltips: {\n                enabled: true,\n              },\n            }}\n            labels={[\n              \"Eating\",\n              \"Drinking\",\n              \"Sleeping\",\n              \"Designing\",\n              \"Coding\",\n              \"Cycling\",\n              \"Running\",\n            ]}\n          />\n        </CCardBody>\n      </CCard>\n    </CCardGroup>\n  );\n};\n\nexport default Charts;\nexport { ChartBarSimple, MainChartExample, ChartLineSimple };\n"],"sourceRoot":""}